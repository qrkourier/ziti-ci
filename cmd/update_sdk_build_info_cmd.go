/*
 * Copyright NetFoundry, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package cmd

import (
	"fmt"
	"github.com/spf13/cobra"
	"html/template"
	"os"
)

var goSdkBuildInfoTemplate = `/*
 * Copyright NetFoundry Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by ziti-ci. DO NOT EDIT.

package sdkinfo

const (
	Version   = "{{.Version}}"
)
`

type SdkBuildInfo struct {
	Version string
}

type SdkBuildInfoCmd struct {
	BaseCommand
}

func (cmd *SdkBuildInfoCmd) Execute() {
	cmd.EvalCurrentAndNextVersion()

	tagVersion := fmt.Sprintf("v%v", cmd.NextVersion)

	buildInfo := &SdkBuildInfo{
		Version: tagVersion,
	}

	compiledTemplate, err := template.New("buildInfo").Parse(goSdkBuildInfoTemplate)
	if err != nil {
		cmd.Failf("failure compiling build info template %+v\n", err)
	}

	file, err := os.Create("ziti/sdkinfo/build_info.go")
	if err != nil {
		cmd.Failf("failure opening build info output file %v. err: %+v\n", cmd.Args[0], err)
	}

	err = compiledTemplate.Execute(file, buildInfo)
	if err != nil {
		cmd.Failf("failure executing build template to output file %v. err: %+v\n", cmd.Args[0], err)
	}
}

func newSdkBuildInfoCmd(root *RootCommand) *cobra.Command {
	cobraCmd := &cobra.Command{
		Use:   "update-sdk-build-info",
		Short: "Update build info struct in a go file",
		Args:  cobra.NoArgs,
	}

	result := &SdkBuildInfoCmd{
		BaseCommand: BaseCommand{
			RootCommand: root,
			Cmd:         cobraCmd,
		},
	}

	return Finalize(result)
}
